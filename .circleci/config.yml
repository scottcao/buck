version: 2.1

orbs:
  win: circleci/windows@2.2.0

install_dlang: &install_dlang
  name: Install Dlang
  command: |
    if [ "${PLATFORM}" == "macos" ]; then
      # gpg depends on the latest git, re-install it.
      brew remove -f git
      brew install git
      brew install gpg
    fi
    curl https://dlang.org/install.sh | bash -s dmd-2.091.0
    source ~/dlang/dmd-2.091.0/activate
    dmd --version

install_lua: &install_lua
  name: Install Lua
  command: |
    cd
    lua_version="5.3.5"
    curl -R -O http://www.lua.org/ftp/lua-${lua_version}.tar.gz
    tar zxf lua-${lua_version}.tar.gz
    cd lua-${lua_version}
    if [ "${PLATFORM}" == "linux" ]; then
      sudo make linux install
    elif [ "${PLATFORM}" == "macos" ]; then
      sudo make macosx install
    fi
    lua -v

install_ocaml: &install_ocaml
  name: Install Ocaml
  command: |
    if [ "${PLATFORM}" == "linux" ]; then
      sudo apt install ocaml
    elif [ "${PLATFORM}" == "macos" ]; then
      brew install opam
      opam init -y
      opam switch create 4.07.1
      eval `opam env`
    fi
    ocaml -version

install_openjdk8: &install_openjdk8
  name: Install OpenJDK8
  command: |
    if [ "${PLATFORM}" == "linux" ]; then
      sudo apt-get update && sudo apt-get install openjdk-8-jdk
      sudo update-java-alternatives -s java-1.8.0-openjdk-amd64
    elif [ "${PLATFORM}" == "macos" ]; then
      brew install openjdk@8
      export PATH="/usr/local/opt/openjdk@8/bin:$PATH"
    fi
    java -version

install_android_sdk: &install_android_sdk
  name: Install Android SDK
  command: |
    # skip if ${ANDROID_SDK} is restored from cache
    if [ ! -d "${ANDROID_SDK}" ]; then
      sdk_os="linux"
      if [ "${PLATFORM}" == "macos" ]; then
        sdk_os="darwin"
      fi
      sdk_zip_filename="sdk-tools-${sdk_os}-4333796.zip"
      mkdir -p "${ANDROID_SDK}"
      cd "${ANDROID_SDK}"
      curl -O "https://dl.google.com/android/repository/${sdk_zip_filename}"
      unzip "${sdk_zip_filename}"
      export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
      echo 'y' |sdkmanager --install tools
      echo 'y' |sdkmanager --install platform-tools
      echo 'y' |sdkmanager --install "build-tools;28.0.0"
      echo 'y' |sdkmanager --install "platforms;android-23"
      rm "${sdk_zip_filename}"
    else
      echo "Android SDK restored from cache, skip installation."
    fi
    # Install 32 bit libraries
    # https://stackoverflow.com/questions/36911709/cannot-run-program-aapt
    # Needed to run Android build-tools
    if [ "${PLATFORM}" == "linux" ]; then
      sudo apt-get install gcc-multilib lib32z1 lib32stdc++6
    fi

install_golang: &install_golang
  name: Install GoLang 1.10.1
  command: |
    golang_versin="1.10.1"
    golang_os="linux"
    if [ "${PLATFORM}" == "macos" ]; then
      golang_os="darwin"
    fi
    golang_binary_filename="go${golang_versin}.${golang_os}-amd64.tar.gz"
    cd ~
    curl -O "https://storage.googleapis.com/golang/${golang_binary_filename}"
    sudo tar -xzf "${golang_binary_filename}" -C /usr/local
    rm "${golang_binary_filename}"
    export PATH="${PATH}:/usr/local/go/bin"
    go version

install_python: &install_python
  name: Install Python 3.9.4
  command: |
    if [ "${PLATFORM}" == "macos" ]; then
      brew install pyenv
    fi
    if [ "${PLATFORM}" == "linux" ]; then
      # Reinstall libffi6 as Ubuntu 20.04 contains only libffi7
      wget http://mirrors.kernel.org/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
      sudo apt install ./libffi6_3.2.1-8_amd64.deb
    fi
    pyenv versions
    export PATH="$(pyenv root)/shims:${PATH}"
    python_version=`python --version` || python_version="Python Not Found"
    # Skip installation if Python 3.9.4 restored frm cache.
    if [ "${python_version}" != "Python 3.9.4" ]; then
      # In the case that pyenv is upgraded to a new version, the cached python
      # is broken and should be uninstalled.
      pyenv uninstall -f 3.9.4
      pyenv install -s 3.9.4
      pyenv global 3.9.4 system
    else
      echo "Python3.9.4 restored from cache, skip installation."
    fi
    python --version

install_groovy: &install_groovy
  name: Install Groovy
  command: |
    curl -s get.sdkman.io | bash
    source "$HOME/.sdkman/bin/sdkman-init.sh"
    sdk install groovy 2.4.18
    groovy -version

install_ghc: &install_ghc
  name: Install Ghc
  command: |
    if [ "${PLATFORM}" == "macos" ]; then
      brew install ghc
    else
      sudo apt-get update
      sudo apt-get install ghc
      sudo apt-get install -y ghc-dynamic
      sudo apt-get install -y ghc-haddock
    fi
    ghc --version

install_rust: &install_rust
  name: Install Rust
  command: |
    curl https://sh.rustup.rs -sSf -o install_rust.sh
    chmod +x install_rust.sh
    ./install_rust.sh -q -y
    rm install_rust.sh
    export PATH="${HOME}/.cargo/bin:${PATH}"
    rustc -V

run_ant_build: &run_ant_build
  name: Run Ant Build
  command: |
    if [ "${PLATFORM}" == "macos" ]; then
      # The latest ant depends on JDK13, install 1.9 instead.
      brew install ant@1.9
      export PATH="/usr/local/opt/ant@1.9/bin:${PATH}"
    fi
    cd "${BUCKROOT}"
    set -ex
    export ANT_OPTS='-Xmx1000m'
    ant

run_buck_build: &run_buck_build
  name: Run Buck Build
  command: |
    cd "${BUCKROOT}"
    echo '-Xmx1024m' > .buckjavaargs.local
    export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
    export PATH="$(pyenv root)/shims:${PATH}"
    set -ex
    ./bin/buck build buck --out "${BUCK_PEX_LOCATION}" || { cat "buck-out/log/buck-0.log"; exit 1; }

linux_environment: &linux_environment # Use string constant for values, no environment variables
  PLATFORM: "linux"
  BUCKROOT: "/home/circleci/buck"
  ANDROID_SDK: "/home/circleci/android-sdk"
  TERM: "dumb"
  BUCK_NUM_THREADS: 3
  BUCK_PEX_LOCATION: "./new_buck.pex"

macos_environment: &macos_environment
  PLATFORM: "macos"
  BUCKROOT: "/Users/distiller/buck"
  ANDROID_SDK: "/Users/distiller/android-sdk"
  TERM: "dumb"
  BUCK_NUM_THREADS: 3
  BUCK_PEX_LOCATION: "./new_buck.pex"
  JAVA_HOME: "/usr/local/Cellar/openjdk@8/1.8.0+345"

windows_environment: &windows_environment
  PLATFORM: "windows"
  BUCKROOT: "C:\\Users\\circleci\\buck"
  ANDROID_SDK: "C:\\Users\\circleci\\android-sdk"
  TERM: "dumb"
  BUCK_NUM_THREADS: 3
  BUCK_PEX_LOCATION: "./new_buck.pex"

dockerhub: &dockerhub
  context:
    - DOCKERHUB_TOKEN

tags_only_filter: &tags_only_filter
  filters:
    tags:
      only: /^v20.*/
    branches:
      ignore: /.*/

jobs:
  linux_build_openjdk8:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      # linux VM
      image: ubuntu-2004:202107-02
    steps:
      # Steps run sequentially in separate shells
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - save_cache:
          paths:
            - ~/android-sdk
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_python
      - save_cache:
          paths:
            - /opt/circleci/.pyenv
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - save_cache:
          paths:
            - ~/buck/buck-out
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          name: Run Build Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export PATH="$(pyenv root)/shims:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=${BUCK_NUM_THREADS} src/... test/...

  linux_unit_groovy:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_lua
      - run:
          <<: *install_ocaml
      - run:
          <<: *install_android_sdk
      - run:
          <<: *install_groovy
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_python
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Unit Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export PATH="$(pyenv root)/shims:${PATH}"
            export GROOVY_HOME="$HOME/.sdkman/candidates/groovy/current"
            set -eux
            ${BUCK_PEX_LOCATION} test --num-threads=${BUCK_NUM_THREADS} --all --test-selectors '!.*[Ii]ntegration.*'
          no_output_timeout: 20m

  linux_build_ant:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_python
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Ant Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export ANDROID_HOME="${ANDROID_SDK}"
            set -eux
            ant circleci
            ./scripts/circleci_test_java_file_format

  linux_test_integration:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          <<: *install_lua
      - run:
          <<: *install_ocaml
      - run:
          <<: *install_ghc
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_groovy
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Integration Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${HOME}/.cargo/bin:${PATH}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export PATH="$(pyenv root)/shims:${PATH}"
            source ~/dlang/dmd-2.091.0/activate
            export GROOVY_HOME="$HOME/.sdkman/candidates/groovy/current"
            set -eux
            # There is a bug in buck, see issue #2435 for details. skip the tests for now.
            ${BUCK_PEX_LOCATION} test --num-threads=$BUCK_NUM_THREADS --all --filter '^(?!(com.facebook.buck.android|com.facebook.buck.jvm.java|com.facebook.buck.features.rust.RustBinaryIntegrationTest|com.facebook.buck.features.rust.RustLinkerIntegrationTest|com.facebook.buck.features.lua.LuaBinaryIntegrationTest|com.facebook.buck.apple.AppleBinaryIntegrationTest|com.facebook.buck.features.haskell.HaskellBinaryIntegrationTest|com.facebook.buck.features.go.GoBinaryIntegrationTest)).*[Ii]ntegration.*'
            # Run this after the bug has been fixed:
            #${BUCK_PEX_LOCATION} test --num-threads=$BUCK_NUM_THREADS --all --filter '^(?!(com.facebook.buck.android|com.facebook.buck.jvm.java)).*[Ii]ntegration.*'

  linux_test_heavy_integration:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_lua
      - run:
          <<: *install_ocaml
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_install_android_ndk.sh
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Heavy Integration Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/... //test/com/facebook/buck/jvm/java/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... //test/com/facebook/buck/jvm/java/... --filter '.*[Ii]ntegration.*'

  linux_test_android_ndk_15:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 15
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r15c
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 15 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  linux_test_android_ndk_16:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 16
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r16b
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 16 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  linux_test_android_ndk_17:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 17
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r17b
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Need android-27 and android-28 to run the tests, install them.
          command: |
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            echo 'y' |sdkmanager --install "platforms;android-27"
            echo 'y' |sdkmanager --install "platforms;android-28"
      - run:
          name: Run Android NDK 17 Tests
          command: |
            # libcurses5 is needed for providing libtinfo.so.5
            sudo apt install libncurses5
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'
          no_output_timeout: 20m

  linux_test_android_ndk_18:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 18
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r18b
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 18 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  linux_test_android_ndk_19:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 19
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r19c
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 19 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  linux_test_android_ndk_20:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 20
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r20b
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 20 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  linux_test_android_ndk_21:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-andoid-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 21
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-linux"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r21d
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 21 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-linux"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  mac_build_openjdk8:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      # Steps run sequentially in separate shells
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - save_cache:
          paths:
            - ~/android-sdk
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_python
      - save_cache:
          paths:
            - ~/.pyenv
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - save_cache:
          paths:
            - ~/buck/buck-out
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          name: Run Build Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export PATH="$(pyenv root)/shims:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=${BUCK_NUM_THREADS} src/... test/...

  macos_unit_groovy:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_lua
      - run:
          <<: *install_ocaml
      - run:
          <<: *install_android_sdk
      - run:
          <<: *install_groovy
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_python
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Unit Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export PATH="$(pyenv root)/shims:${PATH}"
            export GROOVY_HOME="$HOME/.sdkman/candidates/groovy/current"
            set -eux
            ${BUCK_PEX_LOCATION} test --num-threads=${BUCK_NUM_THREADS} --all --test-selectors '!.*[Ii]ntegration.*'

  macos_build_ant:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_python
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Ant Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export ANDROID_HOME="${ANDROID_SDK}"
            export PATH="/usr/local/opt/ant@1.9/bin:${PATH}"
            set -eux
            ant circleci
            ./scripts/circleci_test_java_file_format

  macos_test_integration:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_lua
      - run:
          <<: *install_ocaml
      - run:
          <<: *install_android_sdk
      - run:
          <<: *install_ghc
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          # There is an issue with python in macos 10.14.x. this step is a work around and should be removed later.
          # https://stackoverflow.com/questions/59269208/errorrootcode-for-hash-md5-was-not-found-not-able-to-use-any-hg-mercurial-co
          name: Reinstall Python2
          command: |
            brew uninstall python@2 || echo "python2 was not installed."
            url=https://www.python.org/ftp/python/2.7.17/python-2.7.17-macosx10.9.pkg
            curl -R -L -O $url
            sudo installer -pkg python-2.7.17-macosx10.9.pkg -target /
            # 2to3 causes python3 installation to fail, delete it.
            rm -f /usr/local/bin/2to3
      - run:
          <<: *install_python
      - run:
          <<: *install_groovy
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Integration Tests
          command: |
            cd "${BUCKROOT}"
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            export PATH="$(pyenv root)/shims:${PATH}"
            export GROOVY_HOME="$HOME/.sdkman/candidates/groovy/current"
            export JAVA_HOME="/usr/local/Cellar/openjdk@8/1.8.0+345"
            export PATH="${JAVA_HOME}/bin:${PATH}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -ex
            # Should run this:
            #${BUCK_PEX_LOCATION} test --num-threads=$BUCK_NUM_THREADS --all --filter '^(?!(com.facebook.buck.android|com.facebook.buck.jvm.java)).*[Ii]ntegration.*'
            # But there are some test failures, exclude them for now and fix them later.
            ${BUCK_PEX_LOCATION} test --num-threads=$BUCK_NUM_THREADS --all --filter '^(?!(com.facebook.buck.android|com.facebook.buck.jvm.java|com.facebook.buck.features.haskell.HaskellBinary|com.facebook.buck.swift.SwiftTestIO|com.facebook.buck.apple|com.facebook.buck.features.lua.LuaBinaryIntegrationTest|com.facebook.buck.testrunner.RunWithDefaultTimeoutIntegrationTest|com.facebook.buck.features.apple.project.ProjectIntegrationTest|com.facebook.buck.swift.SwiftIOSBundleIntegrationTest)).*[Ii]ntegration.*'
          no_output_timeout: 1h

  macos_test_heavy_integration:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_lua
      - run:
          <<: *install_ocaml
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_install_android_ndk.sh "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Heavy Integration Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            export JAVA_HOME="/usr/local/Cellar/openjdk@8/1.8.0+345"
            export PATH="${JAVA_HOME}/bin:${PATH}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/... //test/com/facebook/buck/jvm/java/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... //test/com/facebook/buck/jvm/java/... --filter '.*[Ii]ntegration.*'

  macos_test_android_ndk_15:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 15
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r15c "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 15 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  macos_test_android_ndk_16:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 16
          command: |
            cd ${BUCKROOT}
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r16b "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 16 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  macos_test_android_ndk_17:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 17
          command: |
            cd ${BUCKROOT}
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r17b "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Need android-27 and android-28 to run the tests, install them.
          command: |
            export PATH="${ANDROID_SDK}/tools/bin:${PATH}"
            echo 'y' |sdkmanager --install "platforms;android-27"
            echo 'y' |sdkmanager --install "platforms;android-28"
      - run:
          name: Run Android NDK 17 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            # Exclude some long running tests, otherwise CircleCI will timeout after 5 hours.
            #${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '^(?!(com.facebook.buck.android.AndroidExopackageBinary)).*[Ii]ntegration.*'

          # There are tests that take too long to complete.
          no_output_timeout: 5h

  macos_test_android_ndk_18:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 18
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r18b "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 18 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  macos_test_android_ndk_19:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 19
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r19c "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 19 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  macos_test_android_ndk_20:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 20
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r20b "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 20 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  macos_test_android_ndk_21:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - restore_cache:
          # Change this key when upgrading sdk.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-android-sdk-{{ .Branch }}
      - run:
          <<: *install_android_sdk
      - run:
          name: Install Android NDK 21
          command: |
            cd "${BUCKROOT}"
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            ./scripts/circleci_unzip_android_ndk.sh android-ndk-r21d "${PLATFORM}"
      - run:
          <<: *install_golang
      - restore_cache:
          # Change this key when upgrading python.
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-python3.6.2-{{ .Branch }}
      - run:
          <<: *install_rust
      - run:
          <<: *install_python
      - run:
          <<: *install_dlang
      - run:
          <<: *run_ant_build
      - restore_cache:
          key: v-{{ .Environment.CACHE_VERSION }}-buck-macos-build-{{ .Branch }}
      - run:
          <<: *run_buck_build
      - run:
          name: Run Android NDK 21 Tests
          command: |
            export NDK_HOME="${HOME}/android-ndk-${PLATFORM}"
            export ANDROID_HOME="${ANDROID_SDK}"
            source ~/dlang/dmd-2.091.0/activate
            export PATH="${HOME}/.cargo/bin:${PATH}"
            set -eux
            ${BUCK_PEX_LOCATION} build --num-threads=$BUCK_NUM_THREADS //test/com/facebook/buck/android/...
            ${BUCK_PEX_LOCATION} test --num-threads=1 //test/com/facebook/buck/android/... --filter '.*[Ii]ntegration.*'

  windows_build_test:
    environment:
      <<: *windows_environment
    working_directory: "C:\\Users\\circleci\\buck"
    executor: win/default
    steps:
      - checkout
      - run:
          name: Install ant
          command: choco install ant --version=1.9.7
          shell: cmd.exe
      - run:
          name: Install OpenJDK11
          command: choco install adoptopenjdk11
          shell: cmd.exe
      - run:
          # on Windows, python3 is installed as python but buck expect the name python3
          name: Create symlink to python
          command: $pythonpath=(Split-Path((Get-Command python).Path)); cmd /c mklink ${pythonpath}\python3.exe ${pythonpath}\python.exe
          shell: powershell.exe
      - run:
          name: Ant build
          command: cd %BUCKROOT% && refreshenv && ant
          shell: cmd.exe
      - run:
          name: Buck build
          command: cd %BUCKROOT% && refreshenv && bin\buck build buck -c python.interpreter=python
          shell: cmd.exe

  windows_tests:
    environment:
      <<: *windows_environment
    working_directory: "C:\\Users\\circleci\\buck"
    executor: win/default
    steps:
      - checkout
      - run:
          name: Install ant
          command: choco install ant --version=1.9.7
          shell: cmd.exe
      - run:
          name: Install OpenJDK11
          command: choco install adoptopenjdk11
          shell: cmd.exe
      - run:
          # on Windows, python3 is installed as python but buck expect the name python3
          name: Create symlink to python
          command: $pythonpath=(Split-Path((Get-Command python).Path)); cmd /c mklink ${pythonpath}\python3.exe ${pythonpath}\python.exe
          shell: powershell.exe
      - run:
          name: Ant build
          command: cd %BUCKROOT% && refreshenv && ant
          shell: cmd.exe
      - run:
          name: Buck build
          command: cd %BUCKROOT% && refreshenv && bin\buck build buck -c python.interpreter=python
          shell: cmd.exe
      # We know there are some Windows test failures, comment out for now. They should be fixed.
      - run:
          name: Run Windows tests
          command: |
            cd %BUCKROOT% && refreshenv && bin\buck test --all --test-selectors=:windows_failures.txt --test-selectors=:windows_cxx_support.txt
          shell: cmd.exe

  macos_publish_release:
    environment:
      <<: *macos_environment
    working_directory: "/Users/distiller/buck"
    macos:
      xcode: "12.5.1"
    steps:
      - checkout
      - run:
          name: Upgrade pip
          command: python3 -m pip install --upgrade pip
      - run:
          name: pip install requests
          command: python3 -m pip install requests
      - run:
          name: pip install python-dateutil
          command: python3 -m pip install python-dateutil
      - run:
          name: pip install python-magic-bin
          command: python3 -m pip install python-magic-bin
      - run:
          name: Run Homebrew Release
          command: |
            VERSION=${CIRCLE_TAG:1}
            python3 ./tools/release/publish_release.py --no-build-chocolatey --no-chocolatey-publish --no-build-deb --github-token ${GITHUB_TOKEN} --use-existing-release --version ${VERSION} --output-dir artifacts

  linux_publish_release:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_python
      - run:
          name: Upgrade pip
          command: python3 -m pip install --upgrade pip
      - run:
          name: pip install requests
          command: python3 -m pip install requests
      - run:
          name: pip install python-dateutil
          command: python3 -m pip install python-dateutil
      - run:
          name: pip install python-magic
          command: python3 -m pip install python-magic
      - run:
          name: Run linux release
          command: |
            VERSION=${CIRCLE_TAG:1}
            python3 ./tools/release/publish_release.py --no-build-chocolatey --no-chocolatey-publish --no-build-homebrew --github-token ${GITHUB_TOKEN} --use-existing-release --version ${VERSION} --output-dir artifacts

  windows_publish_release:
    environment:
      <<: *windows_environment
    working_directory: "C:\\Users\\circleci\\buck"
    executor: win/default
    steps:
      - checkout
      - run:
          name: Make sure Python3 exists
          command: |
            $pythonpath=(Split-Path((Get-Command python).Path))
            If (Test-Path -Path ${pythonpath}\python3.exe) {
              echo "using ${pythonpath}\python3.exe"
            }
            else {
              cmd /c mklink ${pythonpath}\python3.exe ${pythonpath}\python.exe
            }
          shell: powershell.exe
      - run:
          name: Upgrade pip
          command: python3 -m pip install --upgrade pip
      - run:
          name: pip install requests
          command: python3 -m pip install requests
      - run:
          name: pip install python-dateutil
          command: python3 -m pip install python-dateutil
      - run:
          name: pip install python-magic-bin
          command: python3 -m pip install python-magic-bin
      - run:
          name: Run windows release
          command: |
            VERSION=${CIRCLE_TAG:1}
            python3 ./tools/release/publish_release.py --no-build-deb --no-build-homebrew --github-token ${GITHUB_TOKEN} --chocolatey-token ${CHOCO_TOKEN} --use-existing-release --version ${VERSION} --output-dir artifacts
          shell: bash.exe

  publish_docs:
    environment:
      <<: *linux_environment
    working_directory: "/home/circleci/buck"
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - run:
          <<: *install_openjdk8
      - run:
          # android_sdk needed to build java docs.
          <<: *install_android_sdk
      - run:
          <<: *install_python
      - run:
          # We do not want to build buck, install the latest release instead.
          name: Install Buck
          command: |
            url=`curl -sH "Authorization: token ${GITHUB_TOKEN}" https://api.github.com/repos/facebook/buck/releases/latest |grep "browser_download_url.*deb" |awk '{gsub("\"", "", $2); print $2}'`
            curl -L -O $url
            filename=`basename ${url}`
            sudo dpkg -i ${filename} || echo "Warning: Buck installed without dependencies."
      - run:
          name: Publish docs
          command: |
            export ANDROID_HOME="${ANDROID_SDK}"
            cd docs
            ./publish.sh --start-soyweb

workflows:
  version: 2.1
  linux_jobs:
    # jobs run in parallel
    jobs:
      - linux_build_openjdk8
      - linux_unit_groovy
      - linux_build_ant
      - linux_test_integration
      - linux_test_heavy_integration
      - linux_test_android_ndk_15
      - linux_test_android_ndk_16
      - linux_test_android_ndk_17
      - linux_test_android_ndk_18
      - linux_test_android_ndk_19
      - linux_test_android_ndk_20
      - linux_test_android_ndk_21

  macos_jobs:
    jobs:
      - mac_build_openjdk8
      - macos_unit_groovy
      - macos_build_ant
      - macos_test_integration
      - macos_test_heavy_integration
      - macos_test_android_ndk_15
      - macos_test_android_ndk_16
      - macos_test_android_ndk_17
      - macos_test_android_ndk_18
      - macos_test_android_ndk_19
      - macos_test_android_ndk_20
      - macos_test_android_ndk_21

  windows_jobs:
    jobs:
      - windows_build_test
      - windows_tests

  publish_jobs:
    jobs:
      - macos_publish_release:
          <<: [*tags_only_filter, *dockerhub]
      - linux_publish_release:
          <<: [*tags_only_filter, *dockerhub]
      - windows_publish_release:
          <<: [*tags_only_filter, *dockerhub]
      - publish_docs:
          requires:
            - linux_publish_release
          <<: *tags_only_filter
